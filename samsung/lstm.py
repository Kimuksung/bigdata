# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WeVXGAXgsDnSIc4XDRi-2EkmoHU_TW8_
"""

#@title 기본 제목 텍스트
import pandas as pd
import numpy as np

from google.colab import files
uploaded =files.upload()

df = pd.read_csv('mealData_meal_train2.csv',engine='python',encoding='euc-kr', dtype={'trade_price_idx_value':'float'})

uploaded =files.upload()

df.head()

df2 = pd.read_csv('mealData_meal_test.csv',engine='python',encoding='euc-kr', dtype={'trade_price_idx_value':'float'})

pd.to_datetime(df["SELL_DATE"]).dt.dayofweek.value_counts()
df['weekday'] = pd.to_datetime(df["SELL_DATE"]).dt.dayofweek
df=df[df['weekday']!= 5]


df2['weekday'] = pd.to_datetime(df["SELL_DATE"]).dt.dayofweek
df2=df2[df2['weekday']!= 5]
df2.weekday.value_counts()

type(df2)

train = df.groupby('SELL_DATE').sum()['QUANTITY']

test = df2.groupby('SELL_DATE').sum()['QUANTITY']

type(train)
train = train.to_frame()
#test = train.to_frame()

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler()
train_sc = sc.fit_transform(train)
train_sc

test = test.to_frame()
test_sc = sc.transform(test)
#test_sc

train_sc_df = pd.DataFrame(train_sc, columns=['QUANTITY'], index=train.index)
test_sc_df = pd.DataFrame(test_sc, columns=['QUANTITY'], index=test.index)
train_sc_df.head()

for s in range(1, 6):
    train_sc_df['shift_{}'.format(s)] = train_sc_df['QUANTITY'].shift(s)
    test_sc_df['shift_{}'.format(s)] = test_sc_df['QUANTITY'].shift(s)

train_sc_df.head(13)

X_train = train_sc_df.dropna().drop('QUANTITY', axis=1)
y_train = train_sc_df.dropna()[['QUANTITY']]

X_test = test_sc_df.dropna().drop('QUANTITY', axis=1)
y_test = test_sc_df.dropna()[['QUANTITY']]



X_train.head()

y_train.head()

print(type(X_train))
X_train = X_train.values
print(type(X_train))
X_test= X_test.values

y_train = y_train.values
y_test = y_test.values

print(X_train.shape)
print(X_train)
print(y_train.shape)
#print(y_train)

print(X_train.shape[0])
X_train_t = X_train.reshape(X_train.shape[0], 5, 1)
X_test_t = X_test.reshape(X_test.shape[0], 5, 1)

print("최종 DATA")
print(X_train_t.shape)
print(X_train_t)
print(y_train)

from keras.layers import LSTM 
from keras.models import Sequential 
from keras.layers import Dense 
import keras.backend as K 
from keras.callbacks import EarlyStopping

K.clear_session()
    
model = Sequential() # Sequeatial Model 
model.add(LSTM(5 input_shape=(5, 1))) # (timestep, feature) 
model.add(Dense(1)) # output = 1 
model.compile(loss='mean_squared_error', optimizer='adam') 
model.summary()

early_stop = EarlyStopping(monitor='loss', patience=1, verbose=1)

model.fit(X_train_t, y_train, epochs=100,
          batch_size=30, verbose=1, callbacks=[early_stop])

print(X_test_t , len(X_test_t))

sc.inverse_transform(X_test_t)

train_sc_df.describe()

import matplotlib.pyplot as plt
y_pred = model.predict(X_test_t, batch_size=32)
plt.scatter(y_test, y_pred)
plt.xlabel("Price Index: $Y_i$")
plt.ylabel("Predicted price Index: $\hat{Y}_i$")
plt.title("Prices vs Predicted price Index: $Y_i$ vs $\hat{Y}_i$")

