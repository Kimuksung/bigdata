# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iwrj-FZbH_qeVRznOVmwZC0v2oNVKWvf
"""

from google.colab import drive
drive.mount('/gdrive', force_remount=True)

!ls "/gdrive/My Drive/samsung"

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/My Drive/samsung/mealData_meal_train2.csv',engine='python',encoding='euc-kr', dtype={'trade_price_idx_value':'float'}) 
#/content/drive/My Drive/samsung/mealData_meal_test.csv
df2 = pd.read_csv('/content/drive/My Drive/samsung/mealData_meal_test.csv',engine='python',encoding='euc-kr', dtype={'trade_price_idx_value':'float'})

pd.to_datetime(df["SELL_DATE"]).dt.dayofweek.value_counts()
df['weekday'] = pd.to_datetime(df["SELL_DATE"]).dt.dayofweek
df=df[df['weekday']!= 5]


df2['weekday'] = pd.to_datetime(df["SELL_DATE"]).dt.dayofweek
df2=df2[df2['weekday']!= 5]
df2.weekday.value_counts()

train = df.groupby('SELL_DATE').sum()['QUANTITY']
test = df2.groupby('SELL_DATE').sum()['QUANTITY']
train

a = list(set(df.SELL_DATE))
a.sort()
a
trainset ={'SELL_DATE': a , "QUANTITY":list(train)}
trainset = pd.DataFrame(trainset)
trainset['SELL_DATE'] = pd.to_datetime(trainset.SELL_DATE)
trainset.sort_values(by = ['SELL_DATE'], inplace=True, ascending=True)

a = list(set(df2.SELL_DATE))
a.sort()
a
testset ={'SELL_DATE': a , "QUANTITY":list(test)}
testset = pd.DataFrame(testset)
testset['SELL_DATE'] = pd.to_datetime(testset.SELL_DATE)
testset.sort_values(by = ['SELL_DATE'], inplace=True, ascending=True)
testset

mean = int(train.mean())
train_holiday = ['2018-01-01','2018-02-15','2018-02-16','2018-03-01','2018-05-22','2018-06-06','2018-08-15',
           '2018-09-24','2018-09-25','2018-10-03','2018-10-09','2018-12-25','2019-01-01',
           '2019-02-04','2019-02-05','2019-02-06','2019-03-01']
test_holiday = ['2019-06-06']

temp = {"SELL_DATE": train_holiday , "QUANTITY":mean}
temp = pd.DataFrame(temp)
print(temp)
temp['SELL_DATE'] = pd.to_datetime(temp.SELL_DATE)
trainset = trainset.append(temp,ignore_index=True)
trainset.sort_values(by = ['SELL_DATE'], inplace=True, ascending=True)
trainset

for i in train_holiday:
  print(i + str(trainset[trainset.SELL_DATE==i].QUANTITY))

trainset=trainset.to_frame()

type(trainset)

trainset.info()

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler()

train_sc = sc.fit_transform(trainset)
train_sc

trainset

train_sc_df = pd.DataFrame(train_sc, columns=['QUANTITY'], index=trainset.index)
train_sc_df.head()

for s in range(1, 6):
    train_sc_df['shift_{}'.format(s)] = train_sc_df['QUANTITY'].shift(s)
train_sc_df.head(13)

X_train = train_sc_df.dropna().drop('QUANTITY', axis=1)
y_train = train_sc_df.dropna()[['QUANTITY']]

X_train.head()

y_train.head()

X_train = X_train.values
y_train = y_train.values
print(X_train.shape)
print(X_train)
print(y_train.shape)

print(X_train.shape[0])
X_train_t = X_train.reshape(X_train.shape[0], 5, 1)

print("최종 DATA")
print(X_train_t.shape)
print(X_train_t)
print(y_train)

from keras.layers import LSTM 
from keras.models import Sequential 
from keras.layers import Dense 
import keras.backend as K 
from keras.callbacks import EarlyStopping

K.clear_session()
    
model = Sequential() # Sequeatial Model 
model.add(LSTM(5 ,input_shape=(5, 1))) # (timestep, feature) 
model.add(Dense(1)) # output = 1 
model.compile(loss='mean_squared_error', optimizer='adam') 
model.summary()

early_stop = EarlyStopping(monitor='loss', patience=1, verbose=1)

model.fit(X_train_t, y_train, epochs=100,
          batch_size=30, verbose=1, callbacks=[early_stop])

"""# 새 섹션"""





"""# 새 섹션"""